/*

The idea is to find the lca first and  and then look for the the distance of the key node to the lca node for both nodes which will be equal tothe distance of Both.

*/


#include<bits/stdc++.h>
#include<vector>
#include<map>
#include<stack>
using namespace std;

struct Node
{
	int data;
	Node* left;
	Node* right;
};

Node* newNode(int value)
{
	Node* newNode=new Node();
	newNode->data=value;
	newNode->left=newNode->right=NULL;
	return newNode;
}
Node* LCA(Node* root,int n1,int n2)
{
	if(root==NULL)
	{
		return root;
	}
	if(root->data==n1 || root->data==n2)
	{
		return root;
	}
	Node* left=LCA(root->left,n1,n2);
	Node* right=LCA(root->right,n1,n2);
	if(left && right)
	{
		return root;
	}
	else
	{
		return left? left :right;
	}
}
int findLevel(Node* root,int k,int level)
{
	if(root==NULL)
	{
		return -1;
	}
	if(root->data==k)
	{
		return level;
	}
	int left=findLevel(root->left,k,level+1);
	return left==-1 ? findLevel(root->right,k,level+1): left;
}
int findDistance(Node* root,int a ,int b)
{
	Node* lca=LCA(root,a,b);
	int d1=findLevel(lca,a,0);
	int d2=findLevel(lca,b,0);
	
	return d1+d2;
}
int main()
{
	Node * root = newNode(1);
    root->left = newNode(2);
    root->right = newNode(3);
    root->left->left = newNode(4);
    root->left->right = newNode(5);
    root->right->left = newNode(6);
    root->right->right = newNode(7);
    root->right->left->right = newNode(8);
    cout << "Dist(4, 5) = " << findDistance(root, 4, 5);
    cout << "\nDist(4, 6) = " << findDistance(root, 4, 6);
    cout << "\nDist(3, 4) = " << findDistance(root, 3, 4);
    cout << "\nDist(2, 4) = " << findDistance(root, 2, 4);
    cout << "\nDist(8, 5) = " << findDistance(root, 8, 5);
    return 0;
}
