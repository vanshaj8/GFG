Time Complexity : O(N*K)
Space Complexity : O(1)

CODE:

struct Node* sortAKSortedDLL(struct Node* head,int k)
{

  if(head==NULL || head->next==NULL)
  {
    return head;
  }

  // Performing isnertion sort

  for(Node* i=head->next;i!=NULL;i=i->next)
  {
    Node* j=i;

    while(j->prev!=NULL && j->data<j->prev->data)
    {
      // swapping j and j.prev node

      Node* temp=j->prev->prev;
      Node* temp2=j->prev;
      Node* temp3=j->next;

      j->prev->next=temp3;
      j->prev->prev=j;
      j->prev=temp;
      j->next=temp2;

      if(temp!=NULL)
      {
        temp->next=j;
      }

      if(temp3!=NULL)
      {
        temp3->prev=temp2;
      }

      if(j->prev==NULL)
      {
        head=j;
      }
    }

  }

return head;

}


Time Complexity : O(n* log K)
Space compexity: O(K)


CODE:

struct Node* sortAKSortedDLL(struct Node* head,int k)
{
  // If List is empty

  if(head==NULL)
  {
    return head;
  }

  // MIN Heap implemented

  priority_queue<Node*,vector<Node*>,compare>pq;

  struct Node* newHead=NULL,*last;

  // creating a min heap of first k+1 elements

  for(int i=0;head!=NULL && i<=k ;i++)
  {
    pq.push(head);

    head=head->next;
  }

  // loop till there are elements in an array
  while(!pq.empty())
  {
       if(newHead==NULL)
       {
         newHead=pq.top();
         newHead->prev=NULL;
         // last points to the last node of the linked list
         last=newHead;
       }
       else
       {
         last->next=pq.top();
         pq.top()->prev=last;
         last=pq.top();
       }

       pq.pop();
        if(head!=NULL)
  {
    pq.push(head);
    head=head->next;
  }
  last->next=NULL;
  }

 

  return newHead;
}
