#include<bits/stdc++.h>
using namespace std;

struct Node
{
	int data;
	Node* left;
	Node* right;
};
Node* insert(Node* root,int value)
{
	if(root==NULL)
	{
		root=new Node();
		root->data=value;
		root->left=root->right=NULL;
	}
	else if(value<=root->data)
	{
		root->left=insert(root->left,value);
	}
	else
	{
		root->right=insert(root->right,value);
	}
}

Node* find(Node* root,int data)
{
	if(!root)
	{
		return NULL;
	}
	else if(root->data==data) return root;
	else if(root->data<=data) return find(root->right,data);
	else return find(root->left,data);
}
Node* FindMin(struct Node* root)
{
	if(root==NULL)
	{
		return NULL;
	}
	while(root->left!=NULL)
	{
		root=root->left;
	}
	
	return root;
}
struct Node* GetSuccessor(struct Node* root,int data)
{
	struct Node* current=find(root,data);
	if(current==NULL)
	{
		return NULL;
	}
	// case 1 has right subtree
	if(current->right!=NULL)
	{
		return FindMin(current->right);
	}
	// Case 2 When NO RIGHT SUBTREE
	else
	{
		struct Node* successor=NULL;
		struct Node* ancestor=root;
		while(ancestor!=current)
		{
			if(current->data<ancestor->data)
			{
			     successor=ancestor;
				 ancestor=ancestor->left;	
			}
			else
			{
				ancestor=ancestor->right;
			}
		}
		return successor;
	}
	
	
}
void inorder(Node* root)
{
	if(root==NULL)
	{
		return;
	}
	inorder(root->left);
	cout<<root->data<<" ";
	inorder(root->right);
}
int main()
{
	// Code to Test the login creating an example tree
	
	Node* root=NULL;
	root=insert(root,5);
	root=insert(root,3);
	root=insert(root,10);
	root=insert(root,4);
	root=insert(root,1);
	root=insert(root,11);     
	
	cout<<"Inorder Traversal";
	inorder(root);
	cout<<"\n";
	
	// Print the inorder sucessor  
	
	struct Node* successor=GetSuccessor(root,1);
	if(successor==NULL)
	{
		cout<<"No successor found";
	  }
	  else
	  {
	  	cout<<"Sucessor Found"<<successor->data;
		}  
	return 0;
}
