#include <bits/stdc++.h>
using namespace std;

struct bstnode
{
  int data;
  bstnode* left;
  bstnode* right;
};

bstnode* create(int val)
{
  bstnode* newNode=new bstnode();
  newNode->data=val;
  newNode->left=NULL;
  newNode->right=NULL;

  return newNode;
}

void preorder(bstnode* root)
{
  if(!root)
  {
    return ;
  }
  cout<<root->data<<" ";
  preorder(root->left);
  preorder(root->right);
}

void inorder(bstnode* root)
{
  if(!root)
  {
    return ;
  }
  inorder(root->left);
  cout<<root->data<<" ";
  inorder(root->right);
}

void postorder(bstnode* root)
{
  if(!root)
  {
    return ;
  }
  postorder(root->left);
  postorder(root->right);
  cout<<root->data<<" ";
}
void levelorder(bstnode* root)
{
  if(root==NULL)
  {
    return ;
  }
  else
  {
    queue<bstnode*>q;
    q.push(root);

    while(!q.empty())
    {
      bstnode* curr=q.front();
      q.pop();
      cout<<curr->data<<" ";
      if(curr->left)
      {
        q.push(curr->left);
      }
      if(curr->right)
      {
        q.push(curr->right);
      }

    }
  }
}
bstnode* mirror(bstnode* root)
{
  if(!root)
  {
    return NULL;
  }
  bstnode* temp=root->left;
  root->left=root->right;
  root->right=temp;

  mirror(root->left);
  mirror(root->right);

  return root;
}

void preiterative(bstnode* root)
{
  if(!root)
  {
    return ;
  }
  stack<bstnode*>s;
  s.push(root);
  while(!s.empty())
  {
    bstnode* temp=s.top();
    s.pop();
    cout<<temp->data<<" ";
    if(temp->right)
    {
      s.push(temp->right);
    }
    if(temp->left)
    {
      s.push(temp->left);
    }
  }
}

void initerative(bstnode* root)
{
  if(!root)
  {
    return ;
  }

  stack<bstnode*>s;
  bstnode* curr=root;
  while(!s.empty() || curr!=NULL)
  {
    if(curr!=NULL)
    {
      s.push(curr);
      curr=curr->left;
    }
    else
    {
      curr=s.top();
      s.pop();
      cout<<curr->data<<" ";
      curr=curr->right;
    }
  }
}

void postiterative(bstnode* root)
{
  if(!root)
  {
    return ;
  }
  stack<bstnode*>s1,s2;
s1.push(root);
bstnode* curr;
while(!s1.empty())
{
  curr=s1.top();
  s1.pop();
  s2.push(curr);
  if(curr->left)
  {
    s1.push(curr->left);
  }
  if(curr->right)
  {
    s1.push(curr->right);
  }
}

while(!s2.empty())
{
  curr=s2.top();
  s2.pop();
  cout<<curr->data<<" ";
}

}
int main()
{
  bstnode* root=create(1);
	root->left=create(2);
	root->right=create(3);
	root->left->left=create(4);
	root->left->right=create(5);
	root->right->left=create(6);
	root->right->right=create(7);
  levelorder(root);
  cout<<"\n";
 preorder(root);
  cout<<"\n";
  inorder(root);
  cout<<"\n";
  postorder(root);
  cout<<"\n";
  //mirror(root);
  //levelorder(root);
  // cout<<"\n";
  preiterative(root);
  cout<<"\n";
  initerative(root);
  cout<<"\n";
  postiterative(root);
  return 0;
}
