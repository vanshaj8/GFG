#include<bits/stdc++.h>
#include<iostream>
using namespace std;

struct bstnode
{
	int data;
	bstnode* left;
	bstnode* right;
	
};

bstnode* newNode(int value)
{
	bstnode* temp=new bstnode();
	
	temp->data=value;
	temp->left=temp->right=NULL;
	
	return temp;
}

bstnode* insert(bstnode* root,int value)
{
	if(root==NULL)
	{
		root=newNode(value);
	}
	else if(value<=root->data)
	{
		root->left=insert(root->left,value);
	}
	else
	{
		root->right=insert(root->right,value);
	}
	
	return root;
}

void kthLargestUtil(bstnode* root,int k ,int c)
{
	if(root==NULL || c>=k)
	{
		return ;
	}
	kthLargestUtil(root->right,k,c);
	c++;
	if(c==k)
	{
		cout<<"k th largets element is "<<root->data<<"\n";
		return ;
	}
	kthLargestUtil(root->left,k,c);
}
void kthLargest(bstnode* root,int k)
{
	int c=0;
	
	kthLargestUtil(root,k,c);
}
void inorder(bstnode* root)
{
	if(root==NULL)
	{
		return ;
	}
	inorder(root->left);
	cout<<root->data<<" ";
	inorder(root->right);
}
int main()
{
	bstnode* root=newNode(50);
	root=insert(root,30);
	root=insert(root,20);
	root=insert(root,40);
	root=insert(root,70);
	root=insert(root,60);
	root=insert(root,80);

	for(int k=1;k<=7;k++)
	{
		kthLargest(root,k);
	}
	return 0;
}
