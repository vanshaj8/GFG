#include<bits/stdc++.h>
using namespace std;

struct bstNode
{
	int data;
	bstNode* left;
	bstNode* right;
};

bstNode* getnewnode(int val)
{
	bstNode* newNode=new bstNode();
	newNode->data=val;
	newNode->left=newNode->right=NULL;
	
	return newNode;
}

bstNode* insert(bstNode* root,int val)
{
	if(root==NULL)
	{
		root=getnewnode(val);
	}
	else if(val<=root->data)
	{
		root->left=insert(root->left,val);
	}
	else
	{
		root->right=insert(root->right,val);
	}
	
	return root;
}
bool search(bstNode* root,int value)
{
	if(root==NULL)
	{
		return false;
	}
	else if(root->data==value)
	{
		return true;
	}
	else if(value<=root->data)
	{
		return search(root->left,value);
	}
	else
	{
		return search(root->right,value);
	}
}

void inorder(bstNode* root)
{
	if(!root)
	{
		return ;
	}
	inorder(root->left);
	cout<<root->data<<" ";
	inorder(root->right);
}

bstNode* finmin(bstNode* root)
{
	while(root->left!=NULL)
	{
		root=root->left;
	}
	
	return root;
}
int findmax(bstNode* root)
{
while(root->right!=NULL)
{
	root=root->right;
	}	
	return root->data;
}
bstNode* deleteNode(bstNode* root,int key)
{
	if(!root)
	{
		return NULL;
	}
	else if(root->data<key)
	{
		root->right=deleteNode(root->right,key);
	}
	else if(root->data>key)
	{
		root->left=deleteNode(root->left,key);
	}
	else
	{
		// case 1 : when no children
		if(!root->left && !root->right)
		{
			delete(root);
			return NULL;
		}
		// case 2 :: when it has only 1 children
		else if(root->left==NULL)
		{
			bstNode* temp=root;
			root=root->right;
			delete(temp);
		}
		else if(root->right==NULL)
		{
			bstNode* temp=root;
			root=root->left;
			delete(root);
		}
		else // Case 3: When it has two children
		{
			bstNode* temp=finmin(root->right);
			root->data=temp->data;
			root->right=deleteNode(root->right,temp->data);
		}
	}
	return root;
}

// Function for lowest common ancesstor
// LCA iterative code
bstNode* LCA(bstNode* root,int n1,int n2)
{
	while(root!=NULL)
	{
		if(root->data<n1 && root->data<n2)
		{
			root=root->right;
		}
		else if(root->data>n1 && root->data>n2)
		{
			root=root->left;
		}
		
		else break;
	}
	
	return root;
}
// LCA RECURSIVE CODE
bstNode* LCArec(bstNode* root,int n1,int n2)
{
	if(!root)
	{
		return NULL;
	}
	if(root->data>n1 && root->data>n2)
	{
		return LCArec(root->left,n1,n2);
	}
	if(root->data<n1 && root->data<n2)
	{
		return LCArec(root->right,n1,n2);
	}
	
	return root;
}
int main()
{
	// Inserting elements in binary search tree
	bstNode* root=NULL;
	root=insert(root,1);
	root=insert(root,2);
	root=insert(root,3);
	root=insert(root,4);
	root=insert(root,5);
	root=insert(root,6);
	root=insert(root,7);
	inorder(root);
	// Searching an element in binary search tree
	int num=3;
	cout<<"\n";
	if(search(root,num)==true)
	{
		cout<<"Found"<<endl;
	}
	else
	{
		cout<<"Not Found"<<endl;
	}
	cout<<finmin(root)<<endl;
	cout<<findmax(root)<<endl;
	deleteNode(root,5);
	inorder(root);
	cout<<"\n";
	
	bstNode* root1=NULL;
	root1=insert(root1,20);
	root1=insert(root1,8);
	root1=insert(root1,22);
	root1=insert(root1,4);
	root1=insert(root1,12);
	root1=insert(root1,10);
	root1=insert(root1,14);
	int n1=10 ,n2=14;
	bstNode* t=LCA(root1,10,14);
	cout<<t->data<<" ";
	// bstNode* k=LCArec(root1,10,14);
	// cout<<k->data<<" ";
	return 0;
}
