#include<bits/stdc++.h>
#include<iostream>
using namespace std;

struct bstnode
{
	int data;
	bstnode* left;
	bstnode* right;
	
};

bstnode* newNode(int value)
{
	bstnode* temp=new bstnode();
	
	temp->data=value;
	temp->left=temp->right=NULL;
	
	return temp;
}

bstnode* insert(bstnode* root,int value)
{
	if(root==NULL)
	{
		root=newNode(value);
	}
	else if(value<=root->data)
	{
		root->left=insert(root->left,value);
	}
	else
	{
		root->right=insert(root->right,value);
	}
	
	return root;
}

int getcount(bstnode* root,int low,int high)
{
	if(root==NULL)
	{
		return 0;
	}
	if(root->data==high && root->data==low)
	{
		return 1;
	}
	if(root->data<=high && root->data>=low)
	{
		return 1+getcount(root->left,low,high)+getcount(root->right,low,high);
	}
	else if(root->data<low)
	{
		return getcount(root->right,low,high);
	}
	else
	{
		return getcount(root->left,low,high);
	}
}
int main()
{
	//1st tree
	bstnode*root        = newNode(10); 
    root->left        = newNode(5); 
    root->right       = newNode(50); 
    root->left->left  = newNode(1); 
    root->right->left = newNode(40); 
    root->right->right = newNode(100);
 
	cout<<getcount(root,5,45);
	return 0;
}
