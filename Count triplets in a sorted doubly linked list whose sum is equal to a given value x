TIme Complexity : O(N^3)
Space Complexity:O(1)

int countTriplets(struct Node* head,int x)
{

  struct Node *ptr1,*ptr2,*ptr3;

  int count=0;

  for(ptr1=head;ptr1!=NULL;ptr1=ptr1->next)
  {
    for(ptr2=ptr1->next;ptr2!=NULL;ptr2=ptr2->next)
    {
      for(ptr3=ptr2->next;ptr3!=NULL;ptr3=ptr3->next)
      {
        if((ptr1->data+ptr2->data+ptr3->data)==x)
        {
          count++;
        }
      }
    }
  }


  return count;
}

Time Complexity : O(N^2)
Space Complexity : O(N)

int countTriplets(struct Node* head,int x)
{
  struct Node *ptr,*ptr1,*ptr2;
  int count=0;
  unordered_map<int,Node*> um;

  for(ptr=head;ptr!=NULL;ptr=ptr->next)
  {
    um[ptr->data]=ptr;
  }

  // generating all possible pairs

  for(ptr1=head;ptr1!=NULL;ptr1=ptr1->next)
  {
    for(ptr2=ptr1->next;ptr2!=NULL;ptr2=ptr2->next)
    {
      int p_sum=ptr1->data+ptr2->data;

      if(um.find(x-p_sum)!=um.end() && um[x-p_sum]!=ptr1 && um[x-p_sum]!=ptr2)
      {
        count++;
      }
    }
  }

  return count/3;
}

