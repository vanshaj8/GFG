#include<bits/stdc++.h>
using namespace std;

struct Node
{
	int data;
	Node* left;
	Node* right;
};
Node* insert(Node* root,int value)
{
	if(root==NULL)
	{
		root=new Node();
		root->data=value;
		root->left=root->right=NULL;
	}
	else if(value<=root->data)
	{
		root->left=insert(root->left,value);
	}
	else
	{
		root->right=insert(root->right,value);
	}
}

Node* pre=new Node();
Node* suc=new Node();

void findPreSuc(Node* root,int key)
{
	if(!root)
	{
		return ;
	}
	// if key is present at root
	if(root->data==key)
	{
		// THE Max VALUE IN RIGHT SUBTREE WOULD IS PREDECESSOR
		if(root->left!=NULL)
		{
			Node* temp=root->left;
			while(temp->right!=NULL)
			{
				temp=temp->right;
			}
			pre=temp;
		}
		// The Minimum value in left subtree is predecessor
		if(root->right!=NULL)
		{
			Node* temp=root->right;
			while(temp->left!=NULL)
			{
				temp=temp->left;
			}
			suc=temp;
		}
		return ;
	}
	if(key<root->data)
	{
		suc=root;
		findPreSuc(root->left,key);
	}
	else
	{
		pre=root;
		findPreSuc(root->right,key);
	}
	
}

void inorder(Node* root)
{
	if(root==NULL)
	{
		return;
	}
	inorder(root->left);
	cout<<root->data<<" ";
	inorder(root->right);
}
int main()
{
	// Code to Test the login creating an example tree
	
	Node* root=NULL;
	root=insert(root,5);
	root=insert(root,3);
	root=insert(root,10);
	root=insert(root,4);
	root=insert(root,1);
	root=insert(root,11);     
	
	cout<<"Inorder Traversal";
	inorder(root);
	cout<<"\n";
	
	// Print the inorder sucessor  
	
	findPreSuc(root,3);
	cout<<pre->data<<endl;
	cout<<suc->data<<endl;
	return 0;
}         
